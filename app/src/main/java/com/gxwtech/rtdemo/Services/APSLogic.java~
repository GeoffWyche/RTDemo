package com.gxwtech.rtdemo.Services;

import android.util.Log;

import java.util.Calendar;

/**
 * Created by geoff on 5/8/15.
 */
public class APSLogic {
    private static final String TAG = "APSLogic";
    // high_temp_max is maximum units for a temp basal (we ourselves choose this)
    // (this is above the current temp-basal, so if current basal rate is 0.5, we will at most set
    // the temp basal rate to 0.5 + high_temp_max)
    private static final double high_temp_max = 3;

    // pump_high_temp_max is maximum units that the pump will produce for a temp basal (2 U/h for MM722)
    // +++ fixme: read this value from the pump
    private double pump_high_temp_max = 6.2;

    // target is our target BG - should be in profile! -- read this from the pump! +++
    double bg_target = 115;
    // bg minimum target
    double bg_min = bg_target - 20; // i.e. 135
    double bg_max = bg_target + 20; // i.e. 95

    // don't high-temp if IOB > max_IOB
    double max_IOB = 15;

    // Allow low glucose suspend?
    //boolean enable_low_glucose_suspend = false;
    boolean enable_low_glucose_suspend = true;

    double low_glucose_suspend_at = 85; //mg/dl

    // choices here are: dia_1_hour, dia_2_hour, dia_2pt5_hour, dia_3_hour, dia_4_hour, dia_4pt5_hour, dia_5_hour
    // Which Duration of Insulin Action table to use?
    // TODO: change this to an enum
    String meal_bolus_dia_table = "dia_4pt5_hour";
    String negative_insulin_dia_table = "dia_2_hour";
    String default_dia_table = "dia_3_hour";




    public APSLogic() { init(); }
    public void init() {

    }

    // When this method succeeds, it also contacts the database to add the new treatment.
    // Need curr_basal to calculate if this is a negative insulin event
    public void setTempBasal(double rateUnitsPerHour, int periodMinutes, double currBasal) {
    }

    // get profile from MongoDB
    public void getProfile() {
    }

    public double iobValueAtAbsTime(Calendar startTime, double insulinUnits,
                                    Calendar valueTime,
                                    DIATables.DIATableEnum dia_table) {
        boolean debug_iobValueAtAbsTime = false;
        if (debug_iobValueAtAbsTime) {
            Log.d(TAG, "startTime: " + startTime);
            Log.d(TAG, "valueTime: " + valueTime);
            Log.d(TAG, "insulinUnits: " + insulinUnits);
            Log.d(TAG, "dia_table: " + dia_table);
        }
        int elapsed_minutes = (valueTime - startTime).total_seconds() / 60;
        if (debug_iobValueAtAbsTime) {
            Log.d(TAG, "elapsed minutes since insulin event began: " + elapsed_minutes);
        }
        double rval = insulinUnits * DIATables.insulinPercentRemaining(Math.round(elapsed_minutes), dia_table)/100;
        if (debug_iobValueAtAbsTime) {
            Log.d(TAG, "IOB remaining from event: " + rval);
        }
        return rval;
    }

    // to calculate COB:
    // Easier than IOB, as we assume it is a linear relationship rate=profile.carbs_hr,
    // 20 minutes delayed from consumption
    public double cobValueAtAbsTime(Calendar startTime,
                                    double carbGrams,
                                    Calendar valueTime,
                                    double carbs_absorbed_per_hour) {
        // CAR is carbs absorbed per minute
        double CAR = carbs_absorbed_per_hour / 60.0;
        double rval = 0;
        int elapsed_minutes = (valueTime - startTime).total_seconds() / 60;
        if (elapsed_minutes< 0) {
            //none ingested
            rval = 0;
        } else if (elapsed_minutes<20) {
            //ingested, but none yet absorbed
            rval = carbGrams;
        } else {
            double carbs_absorbed = (CAR * (elapsed_minutes - 20));
            rval = carbGrams - carbs_absorbed;
            // negative values do not make sense
            if (rval < 0) {
                rval = 0;
            }
        }
        //Log.d(TAG,"COB remaining from event: " + rval);
        return rval;
    }
    //TODO: print('Reading temp basal data from ' + TBSO_FILE)
    //TODO: #print('Reading clock data from ' + CLOCK_FILE)
    //TODO: #print('Reading basal data from ' + BASALS_FILE)

    //Now we define a function to calculate the basal rate at a give time:
    // this depends on having a working basal period/rate table
    public double basal_rate_at_abs_time(double time_of_day) {
        // TODO: given a time of day, return the basal rate (units per hour)
        return 0.0;
    }

    // isf is the change in blood glucose due to a unit of insulin.
    // varies with time of day (among many other things!)
    public double isf(double time_of_day) {
        // TODO: given a time of day, return the insulin sensitivity factor
        return 0.0;
    }

    public void MakeADecision() {

        print('IOB (total): %.3f' % iobTotal)
        print('COB (total): ' + str(cobTotal))
        print('remaining BG impact due to insulin events: %.2f' % (remainingBGImpact_IOBtotal))
        print('remaining BG impact due to carbs events: %.2f' % (remainingBGImpact_COBtotal))

        #calc desired BG adjustment
        # We then predict a value for the BG for "sometime in the future, when all IOB and COB are used up".
        # We don't know when that will be (though that would be an interesting algorithm to write).
        # If we see that the eventual BG will be too much or too little, we decide if we can take action.

        icRatio = profile['carbratio'];

        eventualBG = bg - remainingBGImpact_IOBtotal + remainingBGImpact_COBtotal
        print('eventualBG = Current BG (%d) - bg change from IOB (%d)  + bg change from COB (%d) = %d'
                % (bg,remainingBGImpact_IOBtotal, remainingBGImpact_COBtotal,eventualBG))

        if bg > eventualBG:
        # we are predicting a drop in BG
                predBG = round(eventualBG)
        else:
        # we are predicting a rise in BG
                predBG = round((bg + eventualBG)/2)

        # the strangeness in using the average of BG and eventual BG is (I think) due to the logarithmic nature of BG values
        # Remove this once we put AR in place?

        # if most recent reading is more than ten minutes old
        if cgm_elapsed.total_seconds()/60 > 10:
        print('Most recent CGM reading is %(f)2f minutes old. Quitting.' % {'f':cgm_elapsed.total_seconds()/60})
        exit(-2)

        # use this to round to nearest 0.025 (fixme!! should round-down!)
        def mm_round_rate(x):
        return round(x * 40)/40






        if (predBG < bg_min) {
            Log.d(TAG, String.format("Predicting that BG will fall to %g which is less than %g. Can we do something about it?",
                    predBG,bg_min));
            // we predict that the BG will go too low,
            // so lower the current basal rate with a temp-basal
            new_temp_rate = Math.max(0, curr_basal - 2 * (bg_min - predBG) / isf(now));
            Log.d(TAG, String.format("We would like to set temporary rate to %g U/h",new_temp_rate));
            new_temp_rate = mm_round_rate(new_temp_rate);
            Log.d(TAG, String.format("New temporary rate rounded to %g U/h",new_temp_rate));
            // abide by pump's max. (it will enforce this anyway...)
            new_temp_rate = Math.min(new_temp_rate, pump_high_temp_max);
            Log.d(TAG, String.format("Pump will limit temporary rate to %g U/h",new_temp_rate));

            if (current_temp_duration > 0) {
                Log.d(TAG, String.format("Pump is currently administering a temp basal of %g U/h for %d more minutes.",
                        current_temp_rate,current_temp_duration));
                if (new_temp_rate >= current_temp_rate) {
                    Log.d(TAG, "Pump is already doing its best here, so leave it alone.");
                } else {
                    Log.d(TAG, "Pump is already administering a temp basal, but we want a lower one.");
                    // set duration of temp basal to the minimum allowed rate.
                    setTempBasal(new_temp_rate, 30, curr_basal);
                    // 30 minutes is minimum for minimed
                }
            } else {
                Log.d(TAG, String.format("Pump is not currently administering a temp basal.  Current basal rate is %g U/h",curr_basal));
                if (new_temp_rate < curr_basal) {
                    // set duration of temp basal to the minimum allowed rate.
                    setTempBasal(new_temp_rate, 30, curr_basal);
                    // 30 minutes is minimum for Mini-Med
                }
            }
        } else if (predBG < bg_target) {
            Log.d(TAG, String.format("Predicting that BG will fall below %g, but will stay above %g.",bg_target,bg_min));
            // we predict that bg will be lower than target, but within "normal" range
            // cancel any high-temp, let any low-temp run
            if (current_temp_duration > 0) {
                Log.d(TAG, String.format("Pump is currently administering a temp basal of %g U/h for %d more minutes.",
                        current_temp_rate,current_temp_duration));
                // a temp basal rate adjustment is running.
                if (current_temp_rate > curr_basal) {
                    Log.d(TAG, "Because temp basal rate adjustment is higher than regular basal rate, cancelling temp basal.");
                    // cancel any existing temp basal
                    setTempBasal(0, 0, curr_basal);
                } else {
                    Log.d(TAG, "Current temp basal rate adjustment is lower than regular basal rate, so no action is necessary.");
                }
            }
        } else if (predBG > bg_max) {
            Log.d(TAG, String.format("Predicting that BG will rise to %g which is above %g. Can we do something about it?",
                    predBG,bg_max));
            // high-temp as required, to get predicted BG down to bg_max
            fast_insulin = 2 * (predBG - bg_max) / isf(now);
            if (fast_insulin > high_temp_max) {
                Log.d(TAG, String.format("Insulin delivery limited (by roundtrip) from %g U/h to %g U/h.",
                        fast_insulin,high_temp_max));
            }
            new_temp_rate = curr_basal + Math.min(high_temp_max, fast_insulin);
            Log.d(TAG, String.format("We would like to set temporary rate to %g U/h",new_temp_rate));
            new_temp_rate = mm_round_rate(new_temp_rate);
            Log.d(TAG, String.format("New temporary rate rounded to %g U/h",new_temp_rate));
            // abide by pump"s max. (it will enforce this anyway...)
            new_temp_rate = Math.min(new_temp_rate, pump_high_temp_max);
            Log.d(TAG, String.format("Pump will limit temporary rate to U/h",new_temp_rate));
            if (iobTotal >= max_IOB) {
                Log.d(TAG, String.format("IOB (%g U) already exceeds maximum allowed (%g U), so no course of action available.",iobTotal,max_IOB));
            } else {
                // IOB total is ok, check for currently-administered temp-basal
                if (current_temp_duration > 0) {
                    Log.d(TAG, String.format("Pump is currently administering a temp basal of %g U/h for %d more minutes.",
                            current_temp_rate,current_temp_duration));
                    // add 0.1 to compensate for rounding at pump -- if pump is delivering 2.7 and we want to deliver 2.8, we do nothing.
                    if (new_temp_rate <= (current_temp_rate + 0.1)) {
                        Log.d(TAG, "recommended rate is less than current rate (or close), therefore we do nothing.");
                    } else {
                        Log.d(TAG, "Recommended rate is more than current temp basal rate, so over-write old temp basal with new");
                        setTempBasal(new_temp_rate, 30, curr_basal);
                    }
                } else {
                    // Pump is not administering a temp basal currently.
                    if (new_temp_rate > (curr_basal + 0.1)) {
                        Log.d(TAG, String.format("If no action is taken, predicting BG will rise above %g, so recommending %g U/h for 30 min.",bg_max,new_temp_rate));
                        setTempBasal(new_temp_rate, 30, curr_basal);
                    } else {
                        Log.d(TAG, "Recommended setting for temporary basal rate adjustment is less than (or close) current basal rate. Doing nothing.");
                    }
                }
            }
        } else if ((predBG > bg_target) || ((iobTotal > max_IOB) && (predBG > bg_max))) {
            // cancel any low temp, let any high-temp run
            Log.d(TAG, String.format("Predicting BG will rise to %g which is above %g but is below %g.",
                    predBG,bg_target,bg_max));
            if (current_temp_duration > 0) {
                Log.d(TAG, String.format("Pump is currently administering a temp basal of %g U/h for  more minutes.",
                        current_temp_rate,current_temp_duration));
                // a temp basal rate adjustment is running
                if (current_temp_rate > curr_basal) {
                    // it is a high-temp, so let it run
                    Log.d(TAG, "Predicted BG is in the higher-range, current temp-basal is slightly higher, so let it run");
                } else {
                    Log.d(TAG, "Predicted BG is in the higher range, so cancel lower temp-basal");
                    setTempBasal(0, 0, curr_basal);
                }
            } else {
                Log.d(TAG, "No temp-basal is currently running. Good.");
            }
        } else {
            Log.d(TAG, "how did we get here?");
        }
    }
}
